Chapter 2
---------
VALUES AND TYPES
----------------
Values can be - letters ( individula letters or combination of letters) or numbers ( int, float .. etc )

program using these maniupates them like

1 + 1 = 2

we can know type of these values using 'type' keyword. example

>>> type(4) 
<type, 'int'>

>>> type("Hello")
<type, 'str'>

>>> type(2.3)
<type, float>

Strings can be enclosed using sigle quote ( 'hello' ), double quote ("hello") or sometimes '''<text>''' quotes

just using values does not make sense, since we can not hardcode the values. Vaulues can change, due to this we need to use 
variables.

VARIABLE
--------
Variable is a name that refers to a values.

Rules to name a Variable
------------------------
1. Variable names can be arbitrarily long. 
2. They can contain both letters and numbers, but they have to begin with a letter. 
3. Remember that case matters. Bruce and bruce are diï¬€erent variables.
4. The underscore character can appear in a name. It is often used in names with multiple words, such as my_name or price_of_tea_in_china.
5. If you give a variable an illegal name, you get a syntax error:

Recap : Please refer below link for more examples.
-----
https://www.learnpython.org/en/Variables_and_Types

STATEMENTS
----------
A statement is an instruction that the Python interpreter can execute. We have seen two kinds of statements: print and assignment.
We know python script, it contains sequence of statements so python will interpret and executes.

Example
-------
# vi prints.sh   // Enter below statements in the prints.sh file
print 1 
x = 2 
print x

# python prints.sh	// Execute the script
1
2

EVALUATING THE EXPRESSION
-------------------------
An expression is a combination of values, variables, and operators. 
If you type an expression on the command line, the interpreter evaluates it and displays the result:
>>> 1 + 1 
2

Note, a value all by itself is considered an expression, and so is a variable.
>>> 17
17

OPERATORS AND OPERANDS
----------------------
Operators are special symbols that represent computations like addition and multiplication. The values the operator uses are called operands.

[ To be updated later ]

+  Addition
*  Multipication
/  Division ( Integer Division )
// 
** Exponentiate

Order of Operations :   PEMDAS  [ Paranthesis, Exponentiation, Multiplication and Division, Addition and Substraction ]
-------------------
Note: Multiplication and Division has same precedence and they occur in same expression, they are evaluated from left to right.


OPERATIONS ON STRINGS
---------------------
Following operations are illegal on strings

message-1
"Hello"/123 
message*"Hello" 
"15"+2

For strings, the + operator represents concatenation, which means joining the two operands by linking them end-to-end. 

Example1:
---------
+ operator
-----------
>>> fruit = "banana" 
>>> bakedGood = " nut bread" 
>>> print fruit + bakedGood

Output
>>> banana nut bread

Example2:
---------
* operation
-----------
>>> "Fun"*3                   // One has to be string and other has to be integer
>>> 'FunFunFun'

We use # for comments.


