Characteristics of Distributed File System
------------------------------------------
1. DFS allows the sharing to users on different machines connected by a communication network.
2. DFS are implemented using client-server model. ( Server stores the files and Client access it through the network )
3. Network Tranparency - clients should be able to access remote files using the same operation that apply to local files
4. Location Transparency - The name of a file should not reveal its location in the network.
5. Location Idendendence - The name of the file should not change when its physical location changes.
6. User Mobility - User can access shared files from any node in the network.
7. Fault Tolerance - Should work after server or client failures.
8. Scalability - Scale well as its load increases.

Design Considerations
---------------------
1. Name space.
2. Stateful or stateless operations
3. Semantics of sharing.
4. Remote access methods.

NETWORK FILE SYSTEM
-------------------
NFS architecture is based on CLIENT - SERVER  model. 

                 <--COMMUNICATES USING synchronous RPC-->
CLIENT  <------------------------------------------------>  SERVER

FIGURE - 1

SERVER  export either a) Entire disk partition  OR
                      b) Subtree of it.
The exported information is specified in /etc/exports  i.e which client can access each exported file system and access permission.   

CLIENT can mount the exported file system on to their local directory. 

NFS support two types of mount - 
soft - client gives up after sometime and returns error.
hard - client keep retrying the request util a reply is received.
                      
NFS components
--------------
1. NFS Protocol.
2. The Remote Procedure Call ( RPC ) protocol.
3. The Extended Data Representation ( XDR ) - Represent machine independent representation for data transmission over the network.
4. NFS Server code.
5. NFS client code
6. Mount protocol
7. Daemon processes used by NFS.    a) on Server - set of 'nfsd' daemons listen for and respond to CLIENT requests.
                                    b) on Client - set of 'biod' daemns handles asychronous IO for blocks of NFS files.
                                    c) 'mountd' on server - handles mount requests.
8. Network Lock Manager ( NLM ) - 'lockd' and Network status Monitor ( NSM ) - 'statd'

NFS Filesystem Model
--------------------
Filesystem and Filesystem objects
---------------------------------
NFS File attribute - fsid: Uniquely identifies file system on the server.
                     fileid: identifies file or directories within that file system.
so fsid/fileid pair are unique for each file on a particular server.

Filesystem objects:             NFS calls
-------------------             ---------  
Files                     
Directories                     READDIR, READDIRPLUS to read list of file names from directories.
Symbolic links
Special files

Hard link - allows single file to have multiple names
Soft link - contains a path that references another file or directory.

NFS filehandle - a) it is the reference to file or directory that is independent of the file name. All NFS operations 
                    use filehandle to identify the file or directory to which the operation applies.
                 b) Filehandle is opeque to the client.
                 c) Server creates the file handles and only server can interpret the data contained in the file handle.
                 d) NFS v2 - 32 bytes long and NFSv3 - 64 byte variable length.
                    Format for 32 byte object : Typically its of below format:
                    < File system ID,                    inode number,             generation number >
                      [identifies the local file system][inode number of the file] [                ]
                      
                      generation number is required: by server to determine the file handle sent my the client is freed.
                      Example: Between initial access of the file and when the client makes an IO request on th efile, the server deletes
                      the file and reuses its inode.
                      Server increments the generation number of the inode each time the inode is freed.
                      
NFS LOOKUP operation evaluates only one path component at a time, why?
Reasons:
a) Pathname syntax - different OS have different syntax.
b) Client namespace - filesystem mountpointon the client can be detected and crossed.
c) Caching and latency - Most UNIX clients use a directory name lookup cache ( DNLC ) to cache previous pathname evaluations.

Stateless Server
----------------
a) Server Recovery
b) Idempotent operations
c) Statelessness and High Availaility

Some of the basic things the server does is:
--------------------------------------------
a)  Server extracts the file system ID from file handle and uses it to locate the 'vfs' structure for the file system.
b)  Server then invokes 'VFS_GET' operation on this file system to translates the file handle and return pointer to vnode
    of the parent directory.
c)  Server then invoke the VOP_LOOKUP operation on that vnode, which call corresponding function of the local file system.



